"use client"\n\nimport React, { useState, useEffect, useCallback } from "react"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"\nimport { Button } from "@/components/ui/button"\nimport { Badge } from "@/components/ui/badge"\nimport { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"\nimport { Separator } from "@/components/ui/separator"\nimport {\n  Clock,\n  Play,\n  Square,\n  StopCircle,\n  Users,\n  CheckCircle2,\n  AlertCircle,\n  Timer,\n  Coffee,\n  UserCheck,\n  FileText,\n  Download,\n  RefreshCw,\n  Wifi,\n  WifiOff,\n  AlertTriangle,\n  Shield,\n  UserX\n} from "lucide-react"\nimport { useToast } from "@/hooks/use-toast"\nimport { useApi, useMutation } from "@/hooks/use-api"\nimport { format, differenceInMinutes } from "date-fns"\nimport { useCrewChiefPermissions } from "@/hooks/useCrewChiefPermissions"\nimport { CrewChiefPermissionBadge, PermissionGuard } from "@/components/crew-chief-permission-badge"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from "@/components/ui/tooltip"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from "@/components/ui/alert-dialog"\nimport { Progress } from "@/components/ui/progress"\nimport { LoadingSpinner, InlineLoading } from "@/components/loading-states"\nimport { useErrorHandler, type ErrorContext } from "@/lib/error-handler"\nimport { ErrorBoundary } from "@/components/error-boundary"\n\ninterface TimeEntry {\n  id: string;\n  entryNumber: number;\n  clockIn?: string;\n  clockOut?: string;\n  isActive: boolean;\n}\n\ninterface AssignedWorker {\n  id: string;\n  employeeId: string;\n  employeeName: string;\n  employeeAvatar: string;\n  roleOnShift: string;\n  roleCode: string;\n  status: "Clocked Out" | "Clocked In" | "On Break" | "Shift Ended" | "shift_ended" | "not_started";\n  timeEntries: TimeEntry[];\n}\n\ninterface UnifiedShiftManagerProps {\n  shiftId: string;\n  assignedPersonnel: AssignedWorker[];\n  onUpdate: () => void;\n  isOnline?: boolean;\n  shift?: any; // Add shift data for accessing start time and date\n}\n\ninterface ActionState {\n  isProcessing: boolean;\n  lastAction?: string;\n  retryCount: number;\n}\n\nconst roleColors = {\n  "CC": { name: "Crew Chief", color: "text-blue-700", bgColor: "bg-blue-50", borderColor: "border-blue-200" },\n  "SH": { name: "Stage Hand", color: "text-green-700", bgColor: "bg-green-50", borderColor: "border-green-200" },\n  "FO": { name: "Fork Operator", color: "text-purple-700", bgColor: "bg-purple-50", borderColor: "border-purple-200" },\n  "RFO": { name: "Rough Fork Operator", color: "text-orange-700", bgColor: "bg-orange-50", borderColor: "border-orange-200" },\n  "RG": { name: "Rigger", color: "text-red-700", bgColor: "bg-red-50", borderColor: "border-red-200" },\n  "GL": { name: "General Labor", color: "text-gray-700", bgColor: "bg-gray-50", borderColor: "border-gray-200" },\n} as const\n\nconst getStatusConfig = (status: string) => {\n  switch (status) {\n  case "not_started":\n    return {\n      label: "Not Started",\n      color: "bg-gray-100 text-gray-800",\n      icon: Clock,\n      description: "Ready to clock in"\n    }\n  case "Clocked In":\n    return {\n      label: "Working",\n      color: "bg-green-100 text-green-800",\n      icon: Play,\n      description: "Currently working"\n    }\n  case "Clocked Out":\n    return {\n      label: "On Break",\n      color: "bg-yellow-100 text-yellow-800",\n      icon: Coffee,\n      description: "On break"\n    }\n  case "Shift Ended":\n  case "shift_ended":\n    return {\n      label: "Completed",\n      color: "bg-blue-100 text-blue-800",\n      icon: CheckCircle2,\n      description: "Shift completed"\n    }\n  case "no_show":\n    return {\n      label: "No Show",\n      color: "bg-red-100 text-red-800",\n      icon: UserX,\n      description: "Did not show up for shift"\n    }\n  default:\n    return {\n      label: status,\n      color: "bg-gray-100 text-gray-800",\n      icon: AlertCircle,\n      description: "Unknown status"\n    }\n  }\n}\n\nconst calculateTotalHours = (timeEntries: TimeEntry[] = []) => {\n  let totalMinutes = 0\n\n  timeEntries.forEach(entry => {\n    if (entry.clockIn && entry.clockOut) {\n      const clockInTime = new Date(entry.clockIn)\n      const clockOutTime = new Date(entry.clockOut)\n      totalMinutes += differenceInMinutes(clockOutTime, clockInTime)\n    }\n  })\n\n  const hours = Math.floor(totalMinutes / 60)\n  const minutes = totalMinutes % 60\n  return `${hours}h ${minutes}m`\n}\n\n// Helper function to format time in 12-hour format with AM/PM\nconst formatTime12Hour = (timeString: string | undefined): string => {\n  if (!timeString) return ""\n  try {\n    return format(new Date(timeString), "h:mm a")\n  } catch {\n    return ""\n  }\n}\n\n// Helper function to check if \"No Show\" button should be enabled\nconst canMarkNoShow = (shiftStartTime: string, shiftDate: string): boolean => {\n  try {\n    const shiftDateTime = new Date(`${shiftDate}T${shiftStartTime}`)\n    const now = new Date()\n    const minutesSinceStart = differenceInMinutes(now, shiftDateTime)\n    return minutesSinceStart >= 30 // Enable after 30 minutes\n  } catch {\n    return false\n  }\n}\n\nexport default function UnifiedShiftManager({\n  shiftId,\n  assignedPersonnel,\n  onUpdate,\n  isOnline = true,\n  shift\n}: UnifiedShiftManagerProps) {\n  const { hasPermission, permissionCheck, isLoading: permissionLoading } = useCrewChiefPermissions(shiftId)\n  const { toast } = useToast()\n  const [actionState, setActionState] = useState<ActionState>({\n    isProcessing: false,\n    retryCount: 0\n  })\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date>(new Date())\n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true)\n  const [timesheetStatus, setTimesheetStatus] = useState<string | null>(null)\n  const [timesheetId, setTimesheetId] = useState<string | null>(null)\n\n  // Calculate shift statistics\n  const totalWorkers = assignedPersonnel.length\n  const workingCount = assignedPersonnel.filter(w => w.status === "Clocked In").length\n  const completedCount = assignedPersonnel.filter(w => ["Shift Ended", "shift_ended"].includes(w.status)).length\n  const notStartedCount = assignedPersonnel.filter(w => w.status === "not_started").length\n  const onBreakCount = assignedPersonnel.filter(w => w.status === "Clocked Out").length\n\n  // Calculate completion percentage\n  const completionPercentage = totalWorkers > 0 ? (completedCount / totalWorkers) * 100 : 0\n\n  // Fetch timesheet status\n  const fetchTimesheetStatus = useCallback(async () => {\n    try {\n      const response = await fetch(`/api/timesheets?shiftId=${shiftId}`)\n      if (response.ok) {\n        const data = await response.json()\n        if (data.timesheets && data.timesheets.length > 0) {\n          const timesheet = data.timesheets[0]\n          setTimesheetStatus(timesheet.status)\n          setTimesheetId(timesheet.id)\n        } else {\n          setTimesheetStatus(null)\n          setTimesheetId(null)\n        }\n      }\n    } catch (error) {\n      console.warn("Failed to fetch timesheet status:", error)\n    }\n  }, [shiftId])\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!autoRefreshEnabled) return\n\n    const interval = setInterval(() => {\n      if (!actionState.isProcessing && isOnline) {\n        onUpdate()\n        setLastUpdateTime(new Date())\n        fetchTimesheetStatus()\n      }\n    }, 30000) // Refresh every 30 seconds\n\n    return () => clearInterval(interval)\n  }, [autoRefreshEnabled, actionState.isProcessing, isOnline, onUpdate, fetchTimesheetStatus])\n\n  // Fetch timesheet status on component mount and when shift updates\n  useEffect(() => {\n    fetchTimesheetStatus()\n  }, [fetchTimesheetStatus, assignedPersonnel])\n\n  // Enhanced error handling with retry logic\n  const executeWithRetry = useCallback(async (\n    operation: () => Promise<Response>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<Response> => {\n    let lastError: Error | null = null\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const response = await operation()\n        if (response.ok) {\n          return response\n        }\n\n        // If it\'s a client error (4xx), don\'t retry\n        if (response.status >= 400 && response.status < 500) {\n          const errorData = await response.json()\n          throw new Error(errorData.error || `Request failed with status ${response.status}`)\n        }\n\n        // For server errors (5xx), retry\n        throw new Error(`Server error: ${response.status}`)\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error("Unknown error")\n\n        if (attempt < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, delay * attempt))\n          continue\n        }\n      }\n    }\n\n    throw lastError || new Error("Operation failed after retries")\n  }, [])\n\n  const handleClockAction = async (assignmentId: string, action: "clock_in" | "clock_out") => {\n    if (!isOnline) {\n      toast({\n        title: "Offline",\n        description: "Cannot perform clock actions while offline. Please check your connection.",\n        variant: "destructive",\n      })\n      return\n    }\n\n    const worker = assignedPersonnel.find(w => w.id === assignmentId)\n    if (!worker) {\n      toast({\n        title: "Error",\n        description: "Worker not found",\n        variant: "destructive",\n      })\n      return\n    }\n\n    setActionState(prev => ({\n      ...prev,\n      isProcessing: true,\n      lastAction: `${action}_${assignmentId}`\n    }))\n\n    try {\n      await executeWithRetry(async () => {\n        return fetch(`/api/shifts/${shiftId}/assigned/${assignmentId}/clock`, {\n          method: "POST",\n          headers: { "Content-Type": "application/json" },\n          body: JSON.stringify({ action })\n        })\n      })\n\n      toast({\n        title: action === "clock_in" ? "Clocked In" : "Clocked Out",\n        description: `${worker.employeeName} has been ${action === "clock_in" ? "clocked in" : "clocked out"} successfully`,\n      })\n\n      // Immediate update after successful action\n      onUpdate()\n      setLastUpdateTime(new Date())\n\n    } catch (error) {\n      console.error(`Error ${action}:`, error)\n      toast({\n        title: "Error",\n        description: error instanceof Error ? error.message : `Failed to ${action.replace("_", " ")}`,\n        variant: "destructive",\n      })\n    } finally {\n      setActionState(prev => ({\n        ...prev,\n        isProcessing: false,\n        lastAction: undefined\n      }))\n    }\n  }\n\n  const handleEndShift = async (assignmentId: string, workerName: string) => {\n    if (!isOnline) {\n      toast({\n        title: "Offline",\n        description: "Cannot end shifts while offline. Please check your connection.",\n        variant: "destructive",\n      })\n      return\n    }\n\n    setActionState(prev => ({\n      ...prev,\n      isProcessing: true,\n      lastAction: `end_shift_${assignmentId}`\n    }))\n\n    try {\n      await executeWithRetry(async () => {\n        return fetch(`/api/shifts/${shiftId}/assigned/${assignmentId}/end-shift`, {\n          method: "POST"\n        })\n      })\n\n      toast({\n        title: "Shift Ended",\n        description: `${workerName}'s shift has been ended`,\n      })\n\n      onUpdate()\n      setLastUpdateTime(new Date())\n\n    } catch (error) {\n      console.error("Error ending shift:", error)\n      toast({\n        title: "Error",\n        description: error instanceof Error ? error.message : "Failed to end shift",\n        variant: "destructive",\n      })\n    } finally {\n      setActionState(prev => ({\n        ...prev,\n        isProcessing: false,\n        lastAction: undefined\n      }))\n    }\n  }\n\n  const handleEndAllShifts = async () => {\n    if (!isOnline) {\n      toast({\n        title: "Offline",\n        description: "Cannot end all shifts while offline. Please check your connection.",\n        variant: "destructive",\n      })\n      return\n    }\n\n    const activeWorkers = assignedPersonnel.filter(w =>\n      !["Shift Ended", "shift_ended"].includes(w.status)\n    )\n\n    if (activeWorkers.length === 0) {\n      toast({\n        title: "No Active Workers",\n        description: "All workers have already ended their shifts",\n      })\n      return\n    }\n\n    setActionState(prev => ({\n      ...prev,\n      isProcessing: true,\n      lastAction: "end_all_shifts"\n    }))\n\n    try {\n      await executeWithRetry(async () => {\n        return fetch(`/api/shifts/${shiftId}/end-all-shifts`, {\n          method: "POST"\n        })\n      })\n\n      toast({\n        title: "All Shifts Ended",\n        description: `Successfully ended shifts for ${activeWorkers.length} workers`,\n      })\n\n      onUpdate()\n      setLastUpdateTime(new Date())\n\n    } catch (error) {\n      console.error("Error ending all shifts:", error)\n      toast({\n        title: "Error",\n        description: error instanceof Error ? error.message : "Failed to end all shifts",\n        variant: "destructive",\n      })\n    } finally {\n      setActionState(prev => ({\n        ...prev,\n        isProcessing: false,\n        lastAction: undefined\n      }))\n    }\n  }\n\n  const handleNoShow = async (workerId: string, workerName: string) => {\n    if (!isOnline) {\n      toast({\n        title: "Offline",\n        description: "Cannot mark no-show while offline. Please check your connection.",\n        variant: "destructive",\n      })\n      return\n    }\n\n    setActionState(prev => ({\n      ...prev,\n      isProcessing: true,\n      lastAction: `no_show_${workerId}`\n    }))\n\n    try {\n      await executeWithRetry(async () => {\n        return fetch(`/api/shifts/${shiftId}/no-show`, {\n          method: "POST",\n          headers: { "Content-Type": "application/json" },\n          body: JSON.stringify({ workerId }),\n        })\n      })\n\n      toast({\n        title: "No Show Marked",\n        description: `${workerName} has been marked as no-show`,\n      })\n\n      onUpdate()\n      setLastUpdateTime(new Date())\n\n    } catch (error) {\n      console.error("Error marking no-show:", error)\n      toast({\n        title: "Error",\n        description: error instanceof Error ? error.message : "Failed to mark no-show",\n        variant: "destructive",\n      })\n    } finally {\n      setActionState(prev => ({\n        ...prev,\n        isProcessing: false,\n        lastAction: undefined\n      }))\n    }\n  }\n\n  const handleFinalizeTimesheet = async () => {\n    if (!isOnline) {\n      toast({\n        title: "Offline",\n        description: "Cannot finalize timesheet while offline. Please check your connection.",\n        variant: "destructive",\n      })\n      return\n    }\n\n    const incompleteWorkers = assignedPersonnel.filter(w => \n      !["Shift Ended", "shift_ended"].includes(w.status)\n    )\n\n    if (incompleteWorkers.length > 0) {\n      toast({\n        title: "Cannot Finalize",\n        description: `${incompleteWorkers.length} workers have not completed their shifts yet`,\n        variant: "destructive",\n      })\n      return\n    }\n\n    setActionState(prev => ({\n      ...prev,\n      isProcessing: true,\n      lastAction: "finalize_timesheet"\n    }))\n\n    try {\n      const response = await executeWithRetry(async () => {\n        return fetch(`/api/shifts/${shiftId}/finalize-timesheet-simple`, {\n          method: "POST"\n        })\n      })\n\n      const result = await response.json()\n      toast({\n        title: "Timesheet Finalized",\n        description: "Timesheet has been finalized and is pending client approval",\n      })\n\n      if (result.timesheetId) {\n        // Open in new tab with error handling\n        try {\n          window.open(`/timesheets/${result.timesheetId}/approve`, "_blank")\n        } catch (popupError) {\n          console.warn("Popup blocked, showing link instead")\n          toast({\n            title: "Timesheet Ready",\n            description: "Click here to view the timesheet approval page",\n            action: (\n              <Button \n                variant="outline" \n                size="sm"\n                onClick={() => window.location.href = `/timesheets/${result.timesheetId}/approve`}\n              >\n                View Timesheet\n              </Button>\n            ),\n          })\n        }\n      }\n\n      onUpdate()\n      setLastUpdateTime(new Date())\n\n    } catch (error) {\n      console.error("Error finalizing timesheet:", error)\n      toast({\n        title: "Error",\n        description: error instanceof Error ? error.message : "Failed to finalize timesheet",\n        variant: "destructive",\n      })\n    } finally {\n      setActionState(prev => ({\n        ...prev,\n        isProcessing: false,\n        lastAction: undefined\n      }))\n    }\n  }\n\n  const handleManualRefresh = useCallback(() => {\n    if (!actionState.isProcessing) {\n      onUpdate()\n      setLastUpdateTime(new Date())\n      toast({\n        title: "Refreshed",\n        description: "Shift data has been updated",\n      })\n    }\n  }, [actionState.isProcessing, onUpdate, toast])\n\n  return (\n    <ErrorBoundary context={{ component: "UnifiedShiftManager", shiftId }}>\n      <div className="space-y-6">\n        {/* Connection Status */}\n        <ConnectionStatus isOnline={isOnline} />\n\n        {/* Shift Overview Card */}\n        <Card>\n          <CardHeader>\n            <div className="flex items-center justify-between">\n              <div>\n                <CardTitle className="flex items-center gap-2">\n                  <Users className="h-5 w-5" />\n                  Shift Management\n                </CardTitle>\n                <CardDescription>\n                  Manage worker clock-ins, breaks, and shift completion\n                </CardDescription>\n              </div>\n              <div className="flex items-center gap-2">\n                <StatusIndicator \n                  status={actionState.isProcessing ? "loading" : "idle"}\n                  message={actionState.isProcessing ? "Processing..." : `Last updated: ${format(lastUpdateTime, "HH:mm:ss")}`}\n                />\n                <Button\n                  variant="outline"\n                  size="sm"\n                  onClick={handleManualRefresh}\n                  disabled={actionState.isProcessing}\n                >\n                  <RefreshCw className="h-4 w-4" />\n                  Refresh\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Progress Overview */}\n            <div className="space-y-4">\n              <div className="flex items-center justify-between text-sm">\n                <span>Shift Progress</span>\n                <span>{Math.round(completionPercentage)}% Complete</span>\n              </div>\n              <Progress value={completionPercentage} className="h-2" />\n              \n              {/* Status Summary */}\n              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">\n                <div className="text-center">\n                  <div className="text-2xl font-bold text-green-600">{workingCount}</div>\n                  <div className="text-sm text-muted-foreground">Working</div>\n                </div>\n                <div className="text-center">\n                  <div className="text-2xl font-bold text-yellow-600">{onBreakCount}</div>\n                  <div className="text-sm text-muted-foreground">On Break</div>\n                </div>\n                <div className="text-center">\n                  <div className="text-2xl font-bold text-gray-600">{notStartedCount}</div>\n                  <div className="text-sm text-muted-foreground">Not Started</div>\n                </div>\n                <div className="text-center">\n                  <div className="text-2xl font-bold text-blue-600">{completedCount}</div>\n                  <div className="text-sm text-muted-foreground">Completed</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Worker List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Assigned Personnel</CardTitle>\n            <CardDescription>\n              {totalWorkers} workers assigned to this shift\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className="space-y-4">\n              {assignedPersonnel.map((worker) => {\n                const statusConfig = getStatusConfig(worker.status)\n                const roleConfig = roleColors[worker.roleCode as keyof typeof roleColors] || roleColors.GL\n                const noShowEnabled = shift ? canMarkNoShow(shift.startTime, shift.date) : false\n\n                // Get time entries for each pair (up to 3)\n                const timeEntry1 = worker.timeEntries.find(e => e.entryNumber === 1)\n                const timeEntry2 = worker.timeEntries.find(e => e.entryNumber === 2)\n                const timeEntry3 = worker.timeEntries.find(e => e.entryNumber === 3)\n\n                return (\n                  <div key={worker.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors">\n                    <div className="flex items-center gap-4">\n                      <Avatar className="h-12 w-12">\n                        <AvatarImage src={worker.employeeAvatar} alt={worker.employeeName} />\n                        <AvatarFallback>\n                          {worker.employeeName.split(" ").map(n => n[0]).join("")}\n                        </AvatarFallback>\n                      </Avatar>\n                      \n                      <div className="space-y-1">\n                        <div className="flex items-center gap-2">\n                          <h3 className="font-semibold">{worker.employeeName}</h3>\n                          <Badge \n                            variant="outline" \n                            className={`${roleConfig.color} ${roleConfig.bgColor} ${roleConfig.borderColor}`}\n                          >\n                            {roleConfig.name}\n                          </Badge>\n                        </div>\n                        \n                        <div className="flex items-center gap-2">\n                          <Badge \n                            className={statusConfig.color}\n                          >\n                            <StatusIcon className="h-3 w-3 mr-1" />\n                            {statusConfig.label}\n                          </Badge>\n                          \n                          {worker.timeEntries && worker.timeEntries.length > 0 && (\n                            <span className="text-sm text-muted-foreground">\n                              Total: {calculateTotalHours(worker.timeEntries)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className="flex items-center gap-2">\n                      <TooltipProvider>\n                        {worker.status === "not_started" && (\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                size="sm"\n                                onClick={() => handleClockAction(worker.id, "clock_in")}\n                                disabled={actionState.isProcessing || !isOnline}\n                              >\n                                {actionState.lastAction === `clock_in_${worker.id}` ? (\n                                  <RefreshCw className="h-3 w-3 mr-1 animate-spin" />\n                                ) : (\n                                  <Play className="h-3 w-3 mr-1" />\n                                )}\n                                Clock In\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>Start this worker\'s shift</TooltipContent>\n                          </Tooltip>\n                        )}\n\n                        {worker.status === "Clocked In" && (\n                          <>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant="outline"\n                                  size="sm"\n                                  onClick={() => handleClockAction(worker.id, "clock_out")}\n                                  disabled={actionState.isProcessing || !isOnline}\n                                >\n                                  {actionState.lastAction === `clock_out_${worker.id}` ? (\n                                    <RefreshCw className="h-3 w-3 mr-1 animate-spin" />\n                                  ) : (\n                                    <Coffee className="h-3 w-3 mr-1" />\n                                  )}\n                                  Break\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>Send worker on break</TooltipContent>\n                            </Tooltip>\n\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant="destructive"\n                                  size="sm"\n                                  onClick={() => handleEndShift(worker.id, worker.employeeName)}\n                                  disabled={actionState.isProcessing || !isOnline}\n                                >\n                                  {actionState.lastAction === `end_shift_${worker.id}` ? (\n                                    <RefreshCw className="h-3 w-3 mr-1 animate-spin" />\n                                  ) : (\n                                    <StopCircle className="h-3 w-3 mr-1" />\n                                  )}\n                                  End Shift\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>End this worker\'s shift</TooltipContent>\n                            </Tooltip>\n                          </>\n                        )}\n\n                        {worker.status === "Clocked Out" && (\n                          <>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  size="sm"\n                                  onClick={() => handleClockAction(worker.id, "clock_in")}\n                                  disabled={actionState.isProcessing || !isOnline}\n                                >\n                                  {actionState.lastAction === `clock_in_${worker.id}` ? (\n                                    <RefreshCw className="h-3 w-3 mr-1 animate-spin" />\n                                  ) : (\n                                    <Play className="h-3 w-3 mr-1" />\n                                  )}\n                                  Clock In\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>Return from break</TooltipContent>\n                            </Tooltip>\n\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant="destructive"\n                                  size="sm"\n                                  onClick={() => handleEndShift(worker.id, worker.employeeName)}\n                                  disabled={actionState.isProcessing || !isOnline}\n                                >\n                                  {actionState.lastAction === `end_shift_${worker.id}` ? (\n                                    <RefreshCw className="h-3 w-3 mr-1 animate-spin" />\n                                  ) : (\n                                    <StopCircle className="h-3 w-3 mr-1" />\n                                  )}\n                                  End Shift\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>End this worker\'s shift</TooltipContent>\n                            </Tooltip>\n                          </>\n                        )}\n\n                        {(worker.status === "Shift Ended" || worker.status === "shift_ended") && (\n                          <Badge variant="secondary">\n                            <CheckCircle2 className="h-3 w-3 mr-1" />\n                            Completed\n                          </Badge>\n                        )}\n                      </TooltipProvider>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bulk Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Bulk Actions</CardTitle>\n            <CardDescription>\n              Perform actions on all workers at once\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className="flex flex-wrap gap-4">\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant="destructive"\n                    disabled={actionState.isProcessing || completedCount === totalWorkers || !isOnline}\n                  >\n                    <StopCircle className="h-4 w-4 mr-2" />\n                    End All Shifts\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      This will end the shift for all workers who haven\'t completed their shifts yet. This action cannot be undone.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleEndAllShifts}>\n                      End All Shifts\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    disabled={actionState.isProcessing || completedCount !== totalWorkers || !isOnline}\n                    className="bg-blue-600 hover:bg-blue-700"\n                  >\n                    <FileText className="h-4 w-4 mr-2" />\n                    Finalize Timesheet\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Finalize Timesheet?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      This will create a final timesheet for client approval. \n                      Make sure all workers have completed their shifts.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleFinalizeTimesheet}>\n                      Finalize Timesheet\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}